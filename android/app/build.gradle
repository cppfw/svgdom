apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "io.github.cppfw.svgdom_tests"
        minSdkVersion 21
        targetSdkVersion 29

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                targets "mordavokneapp"

                arguments "-DANDROID_STL=c++_shared", "-DANDROID_TOOLCHAIN=clang"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // Encapsulates your external native build configurations.
    externalNativeBuild {

        // Encapsulates your CMake build configurations.
        cmake {
            // Provides a relative path to your CMake build script.
//            path "CMakeLists.txt"
        }
    }
}

repositories {
    maven {
        url 'http://gagis.hopto.org/nexus/repository/android/'
        allowInsecureProtocol = true
    }
}
dependencies {
//    implementation project(path: ':svgdom', configuration: 'default')
}


task copyResToAssets {
    doLast {
        copy{
            from "../../tests/app/res"
            into "src/main/assets/res"
            include "**/*"
        }
    }
}
tasks.whenTaskAdded { task ->
    if (task.name.startsWith('package')) {
        task.dependsOn('copyResToAssets')
    }
}




//===================================
//=== Extract NDK files from AARs ===

// This is needed to be able to write "configurations.implementation.each" below.
configurations.implementation.setCanBeResolved(true)

task extractNDKLibs {
    doLast {
        configurations.implementation.each {
            def file = it.absoluteFile
            copy {
                from zipTree(file)
                into "build/"
                include "ndkLibs/**/*"
            }
        }
    }
}

tasks.whenTaskAdded { task ->
    logger.info('task added')
    if (task.name.startsWith('externalNativeBuild')) {
        task.dependsOn extractNDKLibs
    }
}
